package client

import "strings"

const idSeparator = "_"

// ID is used to identify the client, the ID is consist of multiple parts, some of them are optional.
// The ID is constructed by concatenating the parts with a '_' separator, and the parts are:
//   - The gateway id (optional): the string id of the gateway that the client is connected to
//   - The client id (required): the string id of the client, it is unique for user
//   - if the client is temporary, this id is a string generated by the gateway and start with 'tmp'
//   - The client type (optional): the int type of the client, like 'web', 'mobile', 'desktop'
type ID string

func NewID(gateId string, uid string, device string) ID {
	return ID(strings.Join([]string{gateId, uid, device}, idSeparator))
}

func (i *ID) getPart(index int) string {
	s := strings.Split(string(*i), idSeparator)
	if index >= len(s) {
		return ""
	}
	return s[index]
}

func (i *ID) Gateway() string {
	return i.getPart(0)
}

func (i *ID) UID() string {
	return i.getPart(1)
}

func (i *ID) Device() string {
	return i.getPart(2)
}

// SetGateway sets the gateway part of the ID.
func (i *ID) SetGateway(gateway string) bool {
	if strings.HasPrefix(string(*i), gateway) {
		return false
	}
	s := strings.Split(string(*i), idSeparator)
	if len(s) != 3 {
		return false
	}
	s[0] = gateway
	*i = ID(strings.Join(s, idSeparator))
	return true
}

// SetDevice sets the device type of the client.
func (i *ID) SetDevice(device string) bool {
	if strings.HasSuffix(string(*i), device) {
		return false
	}
	s := strings.Split(string(*i), idSeparator)
	if len(s) != 3 {
		return false
	}
	s[2] = device
	*i = ID(strings.Join(s, idSeparator))
	return true
}
