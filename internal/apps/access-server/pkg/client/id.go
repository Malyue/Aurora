package client

import (
	"encoding/hex"
	"io"
	"math/rand"
	"strings"
	"time"
)

// tempIdPrefix is the prefix for temporary IDs in the second part of the ID.
const tempIdPrefix = "tmp@"

const idSeparator = "_"

// ID is used to identify the client, the ID is consist of multiple parts, some of them are optional.
// The ID is constructed by concatenating the parts with a '_' separator, and the parts are:
//   - The gateway id (optional): the string id of the gateway that the client is connected to
//   - The client id (required): the string id of the client, it is unique for user
//   - if the client is temporary, this id is a string generated by the gateway and start with 'tmp'
//   - The client type (optional): the int type of the client, like 'web', 'mobile', 'desktop'
type ID string

func NewID(gateId string, uid string, device string) ID {
	return ID(strings.Join([]string{gateId, uid, device}, idSeparator))
}

func NewTempID(gateId string) (ID, error) {
	uuid, err := newUUID()
	if err != nil {
		return "", err
	}
	return NewID(gateId, tempIdPrefix+uuid, ""), nil
}

func newUUID() (string, error) {
	var uuid [16]byte
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
	_, err := io.ReadFull(r, uuid[:])
	if err != nil {
		return "", err
	}
	uuid[6] = (uuid[6] & 0x0f) | 0x40
	uuid[8] = (uuid[8] & 0x3f) | 0x80

	var buf1 [36]byte
	buf := buf1[:]
	hex.Encode(buf, uuid[:4])
	buf[8] = '-'
	hex.Encode(buf[9:13], uuid[4:6])
	buf[13] = '-'
	hex.Encode(buf[14:18], uuid[6:8])
	buf[18] = '-'
	hex.Encode(buf[19:23], uuid[8:10])
	buf[23] = '-'
	hex.Encode(buf[24:], uuid[10:])
	return string(buf[:]), nil
}

func (i *ID) getPart(index int) string {
	s := strings.Split(string(*i), idSeparator)
	if index >= len(s) {
		return ""
	}
	return s[index]
}

func (i *ID) Gateway() string {
	return i.getPart(0)
}

func (i *ID) UID() string {
	return i.getPart(1)
}

func (i *ID) Device() string {
	return i.getPart(2)
}

// SetGateway sets the gateway part of the ID.
func (i *ID) SetGateway(gateway string) bool {
	if strings.HasPrefix(string(*i), gateway) {
		return false
	}
	s := strings.Split(string(*i), idSeparator)
	if len(s) != 3 {
		return false
	}
	s[0] = gateway
	*i = ID(strings.Join(s, idSeparator))
	return true
}

// SetDevice sets the device type of the client.
func (i *ID) SetDevice(device string) bool {
	if strings.HasSuffix(string(*i), device) {
		return false
	}
	s := strings.Split(string(*i), idSeparator)
	if len(s) != 3 {
		return false
	}
	s[2] = device
	*i = ID(strings.Join(s, idSeparator))
	return true
}

func (i *ID) Equals(other ID) bool {
	return i.UID()+i.Device() == other.UID()+other.Device()
}
