package client

import (
	_message "Aurora/internal/apps/access-server/pkg/message"
)

var (
	ClientTypeRobot = 1
	ClientTypeUser  = 2
)

type Client interface {
	SetID(id ID)
	IsRunning() bool
	EnqueueMessage(message *_message.Message) error
	Exit()
	Run()
	GetInfo() Info
	AddMessageInterceptor(interceptor MessageInterceptor)
	SetCredentials(credentials *ClientAuthCredentials)
	GetCredentials() *ClientAuthCredentials
}

// ClientAuthCredentials represents the client authentication credentials
// used to client auth when connecting, credentials are generated by business service
// encrypted use the gateway's secret key, and sent to the client
type ClientAuthCredentials struct {
	Type int `json:"type"`

	UserID string `json:"user_id"`

	DeviceID string `json:"device_id"`

	DeviceName string `json:"device_name"`

	Secrets *ClientSecrets `json:"secrets"`

	RiskControl *RiskControl `json:"risk_control"`

	ConnectConfig *ConnectConfig `json:"connect_config"`

	// ConnectID is the temporary connection id of the client, generated by the client
	ConnectID string `json:"connect_id"`

	Timestamp int64 `json:"timestamp"`
}

// EncryptedCredential
type EncryptedCredential struct {
	Version int `json:"version"`

	//  is the encrypted credential string
	Credential string `json:"credential"`
}

type RiskControl struct {
	MaxMessagePeerSecond int
}

type ConnectConfig struct {
	AllowMaxHeartbeatLost int
	HeartbeatDuration     int
	CloseImmediately      bool
}

// ClientSecrets used to control client permission
type ClientSecrets struct {
	// MessageDeliverSecret is the secret of the client, used to authenticate the client message
	// The secret is generated by the service, saved in service, client should not know it
	// When client send a msg to someone else, it should get the sign of the msg target, and send it with the msg.
	// if service want to control which one the client can send message to, service can generate different secret for client,
	// and notify the gateway update the secret, to make client old sign invalid.
	MessageDeliverSecret string `json:"message_deliver_secret"`
	OnlineStateSecret    string `json:"online_state_secret"`
}
